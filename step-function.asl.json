{
  "StartAt": "Configure Process",
  "States": {
    "Configure Process": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "configureProcess",
        "Payload": {
          "something": true
        }
      },
      "ResultSelector": {
        "years.$": "$.Payload.years",
        "id.$": "$.Payload.id",
        "cursor.$": "$.Payload.cursor",
        "hasMore.$": "$.Payload.hasMore"
      },
      "ResultPath": "$",
      "Next": "Get Channel History (Concurrent)"
    },
    "Get Channel History (Concurrent)": {
      "Type": "Map",
      "MaxConcurrency": 4,
      "ItemsPath": "$.years",
      "OutputPath": "$.[0]",
      "Next": "List Bucket Objects",
      "Parameters": {
        "year.$": "$$.Map.Item.Value",
        "id.$": "$.id",
        "cursor.$": "$.cursor",
        "hasMore.$": "$.hasMore"
      },
      "Iterator": {
        "StartAt": "History Iterator",
        "States": {
          "History Iterator": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "FunctionName": "historyIterator",
              "Payload": {
                "year.$": "$.year",
                "id.$": "$.id",
                "cursor.$": "$.cursor",
                "hasMore.$": "$.hasMore"
              }
            },
            "ResultPath": "$.historyIterator",
            "Next": "Is Count Reached"
          },
          "Is Count Reached": {
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.hasMore",
                "BooleanEquals": true,
                "Next": "Wait One Second"
              }
            ],
            "Default": "Done"
          },
          "Wait One Second": {
            "Type": "Wait",
            "Seconds": 1,
            "Next": "Get Channel History"
          },
          "Get Channel History": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "InputPath": "$",
            "Parameters": {
              "FunctionName": "getChannelHistory",
              "Payload": {
                "year.$": "$.year",
                "id.$": "$.id",
                "cursor.$": "$.cursor"
              }
            },
            "TimeoutSeconds": 300,
            "ResultSelector": {
              "cursor.$": "$.Payload.cursor",
              "year.$": "$.Payload.year",
              "id.$": "$.Payload.id",
              "hasMore.$": "$.Payload.hasMore"
            },
            "ResultPath": "$",
            "Next": "History Iterator"
          },
          "Done": {
            "Type": "Pass",
            "End": true
          }
        }
      }
    },
    "List Bucket Objects": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "listObjects",
        "Payload": {
          "id.$": "$.id"
        }
      },
      "ResultSelector": {
        "objects.$": "$.Payload.contents",
        "id.$": "$.Payload.id"
      },
      "ResultPath": "$",
      "TimeoutSeconds": 300,
      "Next": "Format Channel History (Concurrent)"
    },
    "Format Channel History (Concurrent)": {
      "Type": "Map",
      "MaxConcurrency": 4,
      "ItemsPath": "$.objects",
      "Parameters": {
        "key.$": "$$.Map.Item.Value",
        "id.$": "$.id"
      },
      "Next": "Process Superfluous Info",
      "Iterator": {
        "StartAt": "Format Channel History",
        "States": {
          "Format Channel History": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "FunctionName": "formatHistory",
              "Payload": {
                "key.$": "$.key",
                "id.$": "$.id"
              }
            },
            "ResultSelector": {
              "key.$": "$.Payload.key",
              "id.$": "$.Payload.id"
            },
            "ResultPath": "$",
            "TimeoutSeconds": 300,
            "End": true
          }
        }
      }
    },
    "Process Superfluous Info": {
      "Type": "Parallel",
      "End": true,
      "Branches": [
        {
          "StartAt": "Process Images (Concurrent)",
          "States": {
            "Process Images (Concurrent)": {
              "Type": "Map",
              "MaxConcurrency": 4,
              "ItemsPath": "$",
              "Parameters": {
                "item.$": "$$.Map.Item.Value"
              },
              "OutputPath": "$.[0]",
              "End": true,
              "Iterator": {
                "StartAt": "Process Images",
                "States": {
                  "Process Images": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::lambda:invoke",
                    "Parameters": {
                      "FunctionName": "processImages",
                      "Payload": {
                        "id.$": "$.item.id",
                        "key.$": "$.item.key"
                      }
                    },
                    "TimeoutSeconds": 300,
                    "End": true
                  }
                }
              }
            }
          }
        },
        {
          "StartAt": "Extract Sentences (Concurrent)",
          "States": {
            "Extract Sentences (Concurrent)": {
              "Type": "Map",
              "MaxConcurrency": 4,
              "ItemsPath": "$",
              "Parameters": {
                "item.$": "$$.Map.Item.Value"
              },
              "ResultSelector": {
                "id.$": "$.[0].Payload.id",
                "prefix.$": "$.[0].Payload.prefix",
                "bucket.$": "$.[0].Payload.bucket"
              },
              "Next": "Process Sentiment",
              "Iterator": {
                "StartAt": "Extract Sentences",
                "States": {
                  "Extract Sentences": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::lambda:invoke",
                    "Parameters": {
                      "FunctionName": "extractSentences",
                      "Payload": {
                        "id.$": "$.item.id",
                        "key.$": "$.item.key"
                      }
                    },
                    "TimeoutSeconds": 300,
                    "End": true
                  }
                }
              }
            },
            "Process Sentiment": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
              "Parameters": {
                "FunctionName": "getSentiment",
                "Payload": {
                  "prefix.$": "$.prefix",
                  "id.$": "$.id",
                  "bucket.$": "$.bucket",
                  "TaskToken.$": "$$.Task.Token"
                }
              },
              "End": true
            }
          }
        }
      ]
    }
  }
}
